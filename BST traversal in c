#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *right,*left;
    
};
struct node *createBST(struct node* ,int);
void inorder(struct node *);
void preorder(struct node *);
void postorder(struct node *);
void main()
{
    struct node* root=NULL;
    int choice,n,i,item;
    do{
        printf("BST OP\n1.createBST\n2.inorder\n3.preorder\n4.postorder\n5.exit\n");
        printf("Enteer your choice\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            root=NULL;
            printf("for how many no you want BST\n");
            scanf("%d",&n);
            for(i=1;i<=n;i++)
            {
               printf("enter data for %d : ",i);
               scanf("%d",&item);
               root=createBST(root,item);
               
            }
            printf("BST with %d is ready to use\n",n);
            break;
            case 2:
            printf("inorder traversal\n");
            inorder(root);
            break;
            case 3:
            printf("preorder traversal\n");
            preorder(root);
            break;
            case 4: 
            printf("postorder traversal\n");
            postorder(root);
            break;
            case 5:
                   printf("terminating program\n");
                   exit(0);
                   
            deafult: 
                printf("invalid choice\n");
                break;
        }
    }
    while(choice!=7);
}
struct node *createBST(struct node *root,int item)

{
    if(root==NULL)
    {
        root=(struct node*)malloc(sizeof(struct node));
        root->left=NULL;
        root->right=NULL;
        root->data=item;
        return root;
        
    }
    else
    {
        if(item<root->data)
        {
            root->left=createBST(root->left, item);
        }
            else if(item>root->data)
            {
                root->right=createBST(root->right, item);
            }
               else
               {
                   printf("duplicate element not allowed !!!\n");
                   return (root);
               }
    }
}
void inorder(struct node* root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf(" %d ",root->data);
        inorder(root->right);
    }
}
void preorder(struct node* root)
{
    if(root!=NULL)
    {
        printf(" %d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}    
 void postorder(struct node* root)
{
    if(root!=NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf(" %d ",root->data);
    }
}   
